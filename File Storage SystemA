<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Physical File Tracker</title>
    <link rel="stylesheet" href="../CSS/File Storage System.css">
    <style>
        /* Base Styles */
:root {
    --primary-color: #4a6fa5;
    --primary-dark: #3a5a8c;
    --secondary-color: #6c757d;
    --success-color: #28a745;
    --danger-color: #dc3545;
    --warning-color: #ffc107;
    --info-color: #17a2b8;
    --light-color: #f8f9fa;
    --dark-color: #343a40;
    --gray-100: #f8f9fa;
    --gray-200: #e9ecef;
    --gray-300: #dee2e6;
    --gray-400: #ced4da;
    --gray-500: #adb5bd;
    --gray-600: #6c757d;
    --gray-700: #495057;
    --gray-800: #343a40;
    --gray-900: #212529;
    --border-radius: 0.25rem;
    --box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    --transition: all 0.2s ease-in-out;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: var(--gray-800);
    background-color: var(--gray-100);
}

.app-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
}

/* Header */
header {
    text-align: center;
    margin-bottom: 2rem;
    padding: 1rem;
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
}

header h1 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}

header p {
    color: var(--gray-600);
}

/* Search Container */
.search-container {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
}

.search-input-wrapper {
    position: relative;
    flex-grow: 1;
}

.search-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--gray-500);
}

#search-input {
    width: 100%;
    padding: 0.5rem 0.5rem 0.5rem 2rem;
    border: 1px solid var(--gray-300);
    border-radius: var(--border-radius);
    font-size: 1rem;
}

#search-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(74, 111, 165, 0.25);
}

#search-type {
    padding: 0.5rem;
    border: 1px solid var(--gray-300);
    border-radius: var(--border-radius);
    background-color: white;
}

/* Main Content */
.main-content {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 1.5rem;
}

@media (max-width: 768px) {
    .main-content {
        grid-template-columns: 1fr;
    }
}

/* Sidebar */
.sidebar {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.add-file-container, .filter-container {
    background-color: white;
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
}

.add-file-container h2, .filter-container h2 {
    margin-bottom: 1rem;
    color: var(--primary-color);
    font-size: 1.25rem;
}

.form-group {
    margin-bottom: 1rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.form-group input, .form-group select, .form-group textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--gray-300);
    border-radius: var(--border-radius);
    font-size: 1rem;
}

.form-group textarea {
    min-height: 100px;
    resize: vertical;
}

.form-group input:focus, .form-group select:focus, .form-group textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(74, 111, 165, 0.25);
}

/* Buttons */
.btn {
    display: inline-block;
    font-weight: 500;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    user-select: none;
    border: 1px solid transparent;
    padding: 0.5rem 1rem;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: var(--border-radius);
    transition: var(--transition);
    cursor: pointer;
}

.btn-primary {
    color: white;
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.btn-primary:hover {
    background-color: var(--primary-dark);
    border-color: var(--primary-dark);
}

.btn-secondary {
    color: white;
    background-color: var(--secondary-color);
    border-color: var(--secondary-color);
}

.btn-secondary:hover {
    background-color: #5a6268;
    border-color: #545b62;
}

.btn-danger {
    color: white;
    background-color: var(--danger-color);
    border-color: var(--danger-color);
}

.btn-danger:hover {
    background-color: #c82333;
    border-color: #bd2130;
}

.btn-success {
    color: white;
    background-color: var(--success-color);
    border-color: var(--success-color);
}

.btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
}

/* Files Container */
.files-container {
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    padding: 1.5rem;
}

.files-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--gray-200);
}

.files-header h2 {
    color: var(--primary-color);
    font-size: 1.25rem;
}

.sort-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.sort-container label {
    font-weight: 500;
}

.sort-container select {
    padding: 0.5rem;
    border: 1px solid var(--gray-300);
    border-radius: var(--border-radius);
    background-color: white;
}

/* Files List */
.files-list {
    min-height: 300px;
}

.file-card {
    display: flex;
    flex-direction: column;
    padding: 1rem;
    margin-bottom: 1rem;
    border: 1px solid var(--gray-200);
    border-radius: var(--border-radius);
    background-color: white;
    transition: var(--transition);
}

.file-card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
}

.file-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.5rem;
}

.file-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.file-title h3 {
    font-size: 1.1rem;
    margin: 0;
}

.file-type-icon {
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    color: white;
    background-color: var(--primary-color);
}

.file-actions {
    display: flex;
    gap: 0.5rem;
}

.file-action-btn {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    color: var(--gray-600);
    transition: var(--transition);
}

.file-action-btn:hover {
    color: var(--primary-color);
}

.file-action-btn.delete:hover {
    color: var(--danger-color);
}

.file-details {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 0.5rem;
    margin-bottom: 0.5rem;
}

.file-detail {
    display: flex;
    flex-direction: column;
}

.detail-label {
    font-size: 0.75rem;
    color: var(--gray-600);
    margin-bottom: 0.25rem;
}

.detail-value {
    font-weight: 500;
}

.file-notes {
    margin-top: 0.5rem;
    padding-top: 0.5rem;
    border-top: 1px solid var(--gray-200);
}

.notes-label {
    font-size: 0.75rem;
    color: var(--gray-600);
    margin-bottom: 0.25rem;
}

.notes-value {
    white-space: pre-line;
}

.file-category {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-weight: 600;
    border-radius: 1rem;
    background-color: var(--gray-200);
    color: var(--gray-700);
}

.category-Personal {
    background-color: #e3f2fd;
    color: #0d47a1;
}

.category-Work {
    background-color: #e8f5e9;
    color: #1b5e20;
}

.category-Financial {
    background-color: #fffde7;
    color: #f57f17;
}

.category-Medical {
    background-color: #f3e5f5;
    color: #6a1b9a;
}

.category-Legal {
    background-color: #e8eaf6;
    color: #283593;
}

.category-Education {
    background-color: #e0f7fa;
    color: #006064;
}

.category-Other {
    background-color: #fafafa;
    color: #424242;
}

/* Empty State */
.empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    text-align: center;
    color: var(--gray-500);
}

.empty-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

/* Modal */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    overflow: auto;
}

.modal-content {
    background-color: white;
    margin: 10% auto;
    padding: 2rem;
    border-radius: var(--border-radius);
    max-width: 500px;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    position: relative;
}

.confirm-modal-content {
    max-width: 400px;
    text-align: center;
}

.close-modal {
    position: absolute;
    top: 1rem;
    right: 1rem;
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--gray-500);
    cursor: pointer;
}

.close-modal:hover {
    color: var(--gray-800);
}

.modal h2 {
    margin-bottom: 1.5rem;
    color: var(--primary-color);
}

.confirm-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1.5rem;
}

/* Toast Notification */
.toast {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    overflow: hidden;
    display: none;
    z-index: 1001;
    min-width: 300px;
}

.toast-content {
    display: flex;
    align-items: center;
    padding: 1rem;
}

.toast-content i {
    font-size: 1.5rem;
    margin-right: 1rem;
}

.toast-content i.fa-check-circle {
    color: var(--success-color);
}

.toast-content i.fa-exclamation-circle {
    color: var(--danger-color);
}

.toast-message {
    flex-grow: 1;
}

.toast-progress {
    height: 4px;
    background-color: var(--primary-color);
    width: 100%;
}

/* Responsive Adjustments */
@media (max-width: 576px) {
    .search-container {
        flex-direction: column;
    }
    
    .file-header {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .file-actions {
        align-self: flex-end;
    }
}
    </style>
    <script>
      // DOM Elements
const addFileForm = document.getElementById('add-file-form');
const editFileForm = document.getElementById('edit-file-form');
const filesList = document.getElementById('files-list');
const fileCount = document.getElementById('file-count');
const searchInput = document.getElementById('search-input');
const searchType = document.getElementById('search-type');
const clearSearchBtn = document.getElementById('clear-search');
const filterType = document.getElementById('filter-type');
const filterCategory = document.getElementById('filter-category');
const applyFiltersBtn = document.getElementById('apply-filters');
const clearFiltersBtn = document.getElementById('clear-filters');
const sortBy = document.getElementById('sort-by');
const editModal = document.getElementById('edit-modal');
const confirmModal = document.getElementById('confirm-modal');
const closeModalBtn = document.querySelector('.close-modal');
const confirmDeleteBtn = document.getElementById('confirm-delete');
const cancelDeleteBtn = document.getElementById('cancel-delete');
const toast = document.getElementById('toast');
const toastMessage = document.getElementById('toast-message');
const toastIcon = document.getElementById('toast-icon');

// State
let files = [];
let currentFilters = {
    type: '',
    category: ''
};
let currentSort = 'dateAdded-desc';
let currentSearch = '';
let currentSearchType = 'all';
let fileToDelete = null;

// Initialize the app
function init() {
    loadFilesFromStorage();
    renderFiles();
    setCurrentDate();

    // Event listeners
    addFileForm.addEventListener('submit', handleAddFile);
    editFileForm.addEventListener('submit', handleEditFile);
    searchInput.addEventListener('input', handleSearch);
    searchType.addEventListener('change', handleSearch);
    clearSearchBtn.addEventListener('click', clearSearch);
    applyFiltersBtn.addEventListener('click', applyFilters);
    clearFiltersBtn.addEventListener('click', clearFilters);
    sortBy.addEventListener('change', handleSort);
    closeModalBtn.addEventListener('click', closeModal);
    confirmDeleteBtn.addEventListener('click', confirmDelete);
    cancelDeleteBtn.addEventListener('click', closeConfirmModal);

    // Close modals when clicking outside
    window.addEventListener('click', (e) => {
        if (e.target === editModal) {
            closeModal();
        }
        if (e.target === confirmModal) {
            closeConfirmModal();
        }
    });
}

// Set current date in the date input
function setCurrentDate() {
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('date-added').value = today;
    document.getElementById('edit-date-added').value = today;
}

// Load files from local storage
function loadFilesFromStorage() {
    const storedFiles = localStorage.getItem('physicalFiles');
    if (storedFiles) {
        files = JSON.parse(storedFiles);
    }
}

// Save files to local storage
function saveFilesToStorage() {
    localStorage.setItem('physicalFiles', JSON.stringify(files));
}

// Generate a unique ID
function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// Handle adding a new file
function handleAddFile(e) {
    e.preventDefault();

    const newFile = {
        id: generateId(),
        type: document.getElementById('file-type').value,
        name: document.getElementById('file-name').value,
        location: document.getElementById('file-location').value,
        category: document.getElementById('file-category').value,
        notes: document.getElementById('file-notes').value,
        dateAdded: document.getElementById('date-added').value || new Date().toISOString().split('T')[0]
    };

    files.unshift(newFile);
    saveFilesToStorage();
    renderFiles();
    addFileForm.reset();
    setCurrentDate();
    showToast('File added successfully!', 'success');
}

// Handle editing a file
function handleEditFile(e) {
    e.preventDefault();

    const fileId = document.getElementById('edit-file-id').value;
    const fileIndex = files.findIndex(file => file.id === fileId);

    if (fileIndex !== -1) {
        files[fileIndex] = {
            ...files[fileIndex],
            type: document.getElementById('edit-file-type').value,
            name: document.getElementById('edit-file-name').value,
            location: document.getElementById('edit-file-location').value,
            category: document.getElementById('edit-file-category').value,
            notes: document.getElementById('edit-file-notes').value,
            dateAdded: document.getElementById('edit-date-added').value
        };

        saveFilesToStorage();
        renderFiles();
        closeModal();
        showToast('File updated successfully!', 'success');
    }
}

// Open edit modal
function openEditModal(fileId) {
    const file = files.find(file => file.id === fileId);

    if (file) {
        document.getElementById('edit-file-id').value = file.id;
        document.getElementById('edit-file-type').value = file.type;
        document.getElementById('edit-file-name').value = file.name;
        document.getElementById('edit-file-location').value = file.location;
        document.getElementById('edit-file-category').value = file.category;
        document.getElementById('edit-file-notes').value = file.notes;
        document.getElementById('edit-date-added').value = file.dateAdded;

        editModal.style.display = 'block';
    }
}

// Close edit modal
function closeModal() {
    editModal.style.display = 'none';
}

// Open confirm delete modal
function openConfirmModal(fileId) {
    fileToDelete = fileId;
    confirmModal.style.display = 'block';
}

// Close confirm delete modal
function closeConfirmModal() {
    confirmModal.style.display = 'none';
    fileToDelete = null;
}

// Confirm delete file
function confirmDelete() {
    if (fileToDelete) {
        deleteFile(fileToDelete);
        closeConfirmModal();
    }
}

// Delete a file
function deleteFile(fileId) {
    files = files.filter(file => file.id !== fileId);
    saveFilesToStorage();
    renderFiles();
    showToast('File deleted successfully!', 'error');
}

// Handle search
function handleSearch() {
    currentSearch = searchInput.value.trim().toLowerCase();
    currentSearchType = searchType.value;
    renderFiles();
}

// Clear search
function clearSearch() {
    searchInput.value = '';
    searchType.value = 'all';
    currentSearch = '';
    currentSearchType = 'all';
    renderFiles();
}

// Apply filters
function applyFilters() {
    currentFilters.type = filterType.value;
    currentFilters.category = filterCategory.value;
    renderFiles();
}

// Clear filters
function clearFilters() {
    filterType.value = '';
    filterCategory.value = '';
    currentFilters.type = '';
    currentFilters.category = '';
    renderFiles();
}

// Handle sort
function handleSort() {
    currentSort = sortBy.value;
    renderFiles();
}

// Filter files based on search and filters
function filterFiles() {
    return files.filter(file => {
        // Apply search
        if (currentSearch) {
            if (currentSearchType === 'name') {
                if (!file.name.toLowerCase().includes(currentSearch)) {
                    return false;
                }
            } else if (currentSearchType === 'location') {
                if (!file.location.toLowerCase().includes(currentSearch)) {
                    return false;
                }
            } else if (currentSearchType === 'category') {
                if (!file.category.toLowerCase().includes(currentSearch)) {
                    return false;
                }
            } else { // 'all'
                if (!file.name.toLowerCase().includes(currentSearch) &&
                    !file.location.toLowerCase().includes(currentSearch) &&
                    !file.category.toLowerCase().includes(currentSearch) &&
                    !file.notes.toLowerCase().includes(currentSearch)) {
                    return false;
                }
            }
        }

        // Apply type filter
        if (currentFilters.type && file.type !== currentFilters.type) {
            return false;
        }

        // Apply category filter
        if (currentFilters.category && file.category !== currentFilters.category) {
            return false;
        }

        return true;
    });
}

// Sort files
function sortFiles(filteredFiles) {
    const [field, direction] = currentSort.split('-');

    return filteredFiles.sort((a, b) => {
        if (field === 'dateAdded') {
            const dateA = new Date(a.dateAdded);
            const dateB = new Date(b.dateAdded);
            return direction === 'asc' ? dateA - dateB : dateB - dateA;
        } else if (field === 'name') {
            return direction === 'asc'
                ? a.name.localeCompare(b.name)
                : b.name.localeCompare(a.name);
        } else if (field === 'type') {
            return a.type.localeCompare(b.type);
        } else if (field === 'category') {
            return a.category.localeCompare(b.category);
        }
        return 0;
    });
}

// Render files
function renderFiles() {
    const filteredFiles = filterFiles();
    const sortedFiles = sortFiles(filteredFiles);

    fileCount.textContent = `(${sortedFiles.length})`;

    if (sortedFiles.length === 0) {
        filesList.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-folder-open empty-icon"></i>
                <p>${files.length === 0 ? 'No files added yet. Add your first file using the form.' : 'No files match your search or filters.'}</p>
            </div>
        `;
        return;
    }

    filesList.innerHTML = '';

    sortedFiles.forEach(file => {
        const fileCard = document.createElement('div');
        fileCard.className = 'file-card';

        // Get icon based on file type
        let typeIcon = 'fa-file';
        if (file.type === 'folder') typeIcon = 'fa-folder';
        else if (file.type === 'box') typeIcon = 'fa-box';
        else if (file.type === 'binder') typeIcon = 'fa-book';

        // Format date
        const dateAdded = new Date(file.dateAdded);
        const formattedDate = dateAdded.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });

        fileCard.innerHTML = `
            <div class="file-header">
                <div class="file-title">
                    <div class="file-type-icon">
                        <i class="fas ${typeIcon}"></i>
                    </div>
                    <h3>${file.name}</h3>
                </div>
                <div class="file-actions">
                    <button class="file-action-btn edit" title="Edit" onclick="openEditModal('${file.id}')">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="file-action-btn delete" title="Delete" onclick="openConfirmModal('${file.id}')">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </div>
            </div>
            <div class="file-details">
                <div class="file-detail">
                    <span class="detail-label">Location</span>
                    <span class="detail-value">${file.location}</span>
                </div>
                <div class="file-detail">
                    <span class="detail-label">Type</span>
                    <span class="detail-value">${file.type.charAt(0).toUpperCase() + file.type.slice(1)}</span>
                </div>
                <div class="file-detail">
                    <span class="detail-label">Date Added</span>
                    <span class="detail-value">${formattedDate}</span>
                </div>
                ${file.category ? `
                <div class="file-detail">
                    <span class="detail-label">Category</span>
                    <span class="file-category category-${file.category}">${file.category}</span>
                </div>
                ` : ''}
            </div>
            ${file.notes ? `
            <div class="file-notes">
                <div class="notes-label">Notes</div>
                <div class="notes-value">${file.notes}</div>
            </div>
            ` : ''}
        `;

        filesList.appendChild(fileCard);
    });
}

// Show toast notification
function showToast(message, type) {
    toastMessage.textContent = message;

    if (type === 'success') {
        toastIcon.className = 'fas fa-check-circle';
    } else if (type === 'error') {
        toastIcon.className = 'fas fa-exclamation-circle';
    }

    toast.style.display = 'block';

    // Animate progress bar
    const progress = toast.querySelector('.toast-progress');
    progress.style.width = '100%';
    progress.style.transition = 'none';

    setTimeout(() => {
        progress.style.width = '0';
        progress.style.transition = 'width 3s linear';
    }, 100);

    // Hide toast after 3 seconds
    setTimeout(() => {
        toast.style.display = 'none';
    }, 3000);
}

// Initialize the app
init();
    </script>
  </head>
  <body>
    <div class="app-container">
      <header>
        <h1><i class="fas fa-folder"></i> Physical File Tracker</h1>
        <p>Keep track of your physical files and folders</p>
      </header>

      <div class="search-container">
        <div class="search-input-wrapper">
          <i class="fas fa-search search-icon"></i>
          <input
            type="text"
            id="search-input"
            placeholder="Search files or locations..."
          />
        </div>
        <select id="search-type">
          <option value="all">All Fields</option>
          <option value="name">File Name</option>
          <option value="location">Location</option>
          <option value="category">Category</option>
        </select>
        <button id="clear-search" class="btn btn-secondary">Clear</button>
      </div>

      <div class="main-content">
        <div class="sidebar">
          <div class="add-file-container">
            <h2>Add New Item</h2>
            <form id="add-file-form">
              <div class="form-group">
                <label for="file-type">Type:</label>
                <select id="file-type" required>
                  <option value="file">File</option>
                  <option value="folder">Folder</option>
                  <option value="box">Box</option>
                  <option value="binder">Binder</option>
                  <option value="other">Other</option>
                </select>
              </div>
              <div class="form-group">
                <label for="file-name">Name:</label>
                <input
                  type="text"
                  id="file-name"
                  placeholder="Enter file/folder name"
                  required
                />
              </div>
              <div class="form-group">
                <label for="file-location">Location:</label>
                <input
                  type="text"
                  id="file-location"
                  placeholder="Where is it stored?"
                  required
                />
              </div>
              <div class="form-group">
                <label for="file-category">Category:</label>
                <select id="file-category">
                  <option value="">-- Select Category --</option>
                  <option value="Personal">Personal</option>
                  <option value="Work">Work</option>
                  <option value="Financial">Financial</option>
                  <option value="Medical">Medical</option>
                  <option value="Legal">Legal</option>
                  <option value="Education">Education</option>
                  <option value="Other">Other</option>
                </select>
              </div>
              <div class="form-group">
                <label for="file-notes">Notes:</label>
                <textarea
                  id="file-notes"
                  placeholder="Additional details (optional)"
                ></textarea>
              </div>
              <div class="form-group">
                <label for="date-added">Date Added:</label>
                <input type="date" id="date-added" />
              </div>
              <button type="submit" class="btn btn-primary">Add Item</button>
            </form>
          </div>

          <div class="filter-container">
            <h2>Filters</h2>
            <div class="form-group">
              <label for="filter-type">Type:</label>
              <select id="filter-type">
                <option value="">All Types</option>
                <option value="file">File</option>
                <option value="folder">Folder</option>
                <option value="box">Box</option>
                <option value="binder">Binder</option>
                <option value="other">Other</option>
              </select>
            </div>
            <div class="form-group">
              <label for="filter-category">Category:</label>
              <select id="filter-category">
                <option value="">All Categories</option>
                <option value="Personal">Personal</option>
                <option value="Work">Work</option>
                <option value="Financial">Financial</option>
                <option value="Medical">Medical</option>
                <option value="Legal">Legal</option>
                <option value="Education">Education</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <button id="apply-filters" class="btn btn-primary">
              Apply Filters
            </button>
            <button id="clear-filters" class="btn btn-secondary">
              Clear Filters
            </button>
          </div>
        </div>

        <div class="files-container">
          <div class="files-header">
            <h2>Your Files <span id="file-count">(0)</span></h2>
            <div class="sort-container">
              <label for="sort-by">Sort by:</label>
              <select id="sort-by">
                <option value="dateAdded-desc">Date Added (Newest)</option>
                <option value="dateAdded-asc">Date Added (Oldest)</option>
                <option value="name-asc">Name (A-Z)</option>
                <option value="name-desc">Name (Z-A)</option>
                <option value="type-asc">Type</option>
                <option value="category-asc">Category</option>
              </select>
            </div>
          </div>

          <div class="files-list" id="files-list">
            <!-- Files will be displayed here -->
            <div class="empty-state">
              <i class="fas fa-folder-open empty-icon"></i>
              <p>No files added yet. Add your first file using the form.</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit Modal -->
    <div id="edit-modal" class="modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2>Edit Item</h2>
        <form id="edit-file-form">
          <input type="hidden" id="edit-file-id" />
          <div class="form-group">
            <label for="edit-file-type">Type:</label>
            <select id="edit-file-type" required>
              <option value="file">File</option>
              <option value="folder">Folder</option>
              <option value="box">Box</option>
              <option value="binder">Binder</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div class="form-group">
            <label for="edit-file-name">Name:</label>
            <input
              type="text"
              id="edit-file-name"
              placeholder="Enter file/folder name"
              required
            />
          </div>
          <div class="form-group">
            <label for="edit-file-location">Location:</label>
            <input
              type="text"
              id="edit-file-location"
              placeholder="Where is it stored?"
              required
            />
          </div>
          <div class="form-group">
            <label for="edit-file-category">Category:</label>
            <select id="edit-file-category">
              <option value="">-- Select Category --</option>
              <option value="Personal">Personal</option>
              <option value="Work">Work</option>
              <option value="Financial">Financial</option>
              <option value="Medical">Medical</option>
              <option value="Legal">Legal</option>
              <option value="Education">Education</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div class="form-group">
            <label for="edit-file-notes">Notes:</label>
            <textarea
              id="edit-file-notes"
              placeholder="Additional details (optional)"
            ></textarea>
          </div>
          <div class="form-group">
            <label for="edit-date-added">Date Added:</label>
            <input type="date" id="edit-date-added" />
          </div>
          <button type="submit" class="btn btn-primary">Save Changes</button>
        </form>
      </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirm-modal" class="modal">
      <div class="modal-content confirm-modal-content">
        <h2>Confirm Deletion</h2>
        <p>
          Are you sure you want to delete this item? This action cannot be
          undone.
        </p>
        <div class="confirm-buttons">
          <button id="confirm-delete" class="btn btn-danger">Delete</button>
          <button id="cancel-delete" class="btn btn-secondary">Cancel</button>
        </div>
      </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast">
      <div class="toast-content">
        <i id="toast-icon" class="fas"></i>
        <div class="toast-message" id="toast-message"></div>
      </div>
      <div class="toast-progress"></div>
    </div>

    <script src="script.js"></script>
  </body>
</html>
